
//////////////////////////////////////////////////////////////////////////
// Error Code definitions 

#ifndef _FILE_ERROR_CODE_H_
#define _FILE_ERROR_CODE_H_

#ifdef __cplusplus
extern "C"
{
#endif


	//////////////////////////////////////////////////////////////////////////
	// Step I: status definitions
	//

	typedef uint32_t gmp_stat_t;


	//////////////////////////////////////////////////////////////////////////
	// Step II: extern global variables
	// 
	
	// This variable may save the last error (not fatal) code.
	// These code may help developer locate faults rapidly.
	//
	extern gmp_stat_t last_error;

	// This variable may save the last fatal (not error) code.
	// These code may help developer locate faults rapidly.
	extern gmp_stat_t last_fatal;


	//////////////////////////////////////////////////////////////////////////
	// Step III Error code definitions
	// 
	
	// ....................................................................//
	// Definitions of Stat start code.
	// 
	
	// Just an information
	//
#define GMP_STAT_INFO_BEGIN				(0x00000000)
	// an warning you may deal with it if it necessary
	//
#define GMP_STAT_WARN_BEGIN				(0x20000000)
	// an error you must deal with it before get out of hand
	//
#define GMP_STAT_ERRO_BEGIN				(0x40000000)
	// an fatal error happened and the system will shutdown right now
	// And the system may only recover from reset manually.
	//
#define GMP_STAT_FATAL_BEGIN			(0x80000000)


	// import all the error code details
	// This function would be generated by `tools/error_code_gen`.
	//
#include <core/std/ec/error_code.detals.inl>


	//////////////////////////////////////////////////////////////////////////
	// Step IV: extern functions
	// 
	// utilities function for error code.
	// 
		

	// This function would show the details of error code.
	// This function would be generated by `tools/error_code_gen`,
	// in <error_code_show.inl>
	//
	extern gmp_stat_t gmp_std_return(gmp_stat_t error_code);

	// function to judge if error is fatal

	// GMP library standard error return function

	GMP_STATIC_INLINE 
		gmp_stat_t gmp_is_error(gmp_stat_t error_code)
	{
		return error_code > GMP_STAT_ERRO_BEGIN;
	}

	GMP_STATIC_INLINE
		gmp_stat_t gmp_is_warning(gmp_stat_t error_code)
	{
		return error_code > GMP_STAT_WARN_BEGIN;
	}

	GMP_STATIC_INLINE
		gmp_stat_t gmp_is_fine(gmp_stat_t error_code)
	{
		return error_code < GMP_STAT_WARN_BEGIN;
	}

	// necessary patch here.
	// This definition should keep pace with `gmp_cport.h`.
	//
	void gmp_system_stuck(void);
	
#if defined SPECIFY_STUCK_WHEN_ERROR
	GMP_STATIC_INLINE
		gmp_stat_t gmp_error(gmp_stat_t error_code)
	{
		if (error_code > GMP_STAT_FATAL_BEGIN)
			gmp_system_stuck();

		return error_code;
	}
#else
	// error
	// -- error-info(auto generated)
	// just when error code is error or even fatal, the system will stuck here.
	GMP_STATIC_INLINE
		gmp_stat_t gmp_error(gmp_stat_t error_code)
	{
		if (error_code > GMP_STAT_FATAL_BEGIN)
			gmp_system_stuck();

		return error_code;
	}
#endif // SPECIFY_STUCK_WHEN_ERROR



#ifdef __cplusplus
}
#endif

#endif // _FILE_ERROR_CODE_H_
