/**
 * @file peripheral_mapping.cpp
 * @author Javnson (javnson@zju.edu.cn)
 * @brief
 * @version 0.1
 * @date 2024-09-30
 *
 * @copyright Copyright GMP(c) 2024
 *
 */

// This file's framework is generated by bsp_c1
#include <core/gmp_core.hpp>
#include <ctl/ctl.config.h>

#include <peripheral_mapping.h>

//////////////////////////////////////////////////////////////////////////
// Peripherals implement classes

#ifdef __cplusplus
extern "C"
{
#endif



#ifdef __cplusplus
}
#endif



#define SYSTEM_FREQUENCY 60

// 10 kHz PWM frequency
#define PWM_FREQ 10000

//////////////////////////////////////////////////////////////////////////
// Devices on the peripheral

void gmp_setup_peripheral()
{



    // Reassign ISRs.

    EALLOW; // This is needed to write to EALLOW protected registers

    PieVectTable.ADCINT1 = &MainISR;

    // Enable PIE group 1 interrupt 1 for ADC1_INT
    PieCtrlRegs.PIEIER1.bit.INTx1 = 1;

    // Enable EOC interrupt(after the 4th conversion)

    AdcRegs.ADCINTOVFCLR.bit.ADCINT1 = 1;
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;
    AdcRegs.INTSEL1N2.bit.INT1CONT = 1; //
    AdcRegs.INTSEL1N2.bit.INT1SEL = 4;
    AdcRegs.INTSEL1N2.bit.INT1E = 1;

    // Enable CPU INT1 for ADC1_INT:
    IER |= M_INT1;

    EDIS;
}

// This function should be implement by bsp_c1
void gmp_init_peripheral_tree()
{
    

}

//////////////////////////////////////////////////////////////////////////
// interrupt reaction

interrupt void MainISR(void)
{
    // Get ADC result
    // AdcResult.ADCRESULT1

    // Call GMP CTL
    ctl_dispatch();

    // ------------------------------------------------------------------------------
    //  Connect inputs of the PWM_DRV module and call the PWM signal generation macro
    // ------------------------------------------------------------------------------
//    pwm1.MfuncC1 = svgen1.Ta;
//    pwm1.MfuncC2 = svgen1.Tb;
//    pwm1.MfuncC3 = svgen1.Tc;
//    PWM_MACRO(1, 2, 3, pwm1); // Calculate the new PWM compare values

    // Enable more interrupts from this timer
    AdcRegs.ADCINTFLG.bit.ADCINT1 = 1;

    // Acknowledge interrupt to receive more interrupts from PIE group 1
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}
