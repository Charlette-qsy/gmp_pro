/**
 * @file peripheral_mapping.cpp
 * @author Javnson (javnson@zju.edu.cn)
 * @brief
 * @version 0.1
 * @date 2024-09-30
 *
 * @copyright Copyright GMP(c) 2024
 *
 */

// This file's framework is generated by bsp_c1
#include <gmp_core.hpp>
#include <ctl/ctl.config.h>

#include <peripheral_mapping.h>

//////////////////////////////////////////////////////////////////////////
// Peripherals implement classes

#ifdef __cplusplus
extern "C"
{
#endif

// app_lib from Control Suite
#include "DSP2803x_EPwm_defines.h" // Include header for PWM defines
#include "f2803xileg_vdc.h"        // Include header for the ILEG2DCBUSMEAS object
#include "f2803xpwm.h"             // Include header for the PWMGEN object
#include "f2803xpwmdac.h"          // Include header for the PWMGEN object
#include "f2803xqep.h"             // Include header for the QEP object

#ifdef __cplusplus
}
#endif

// Instance a PWM driver instance
PWMGEN pwm1 = PWMGEN_DEFAULTS;

// Instance a PWM DAC driver instance
PWMDAC pwmdac1 = PWMDAC_DEFAULTS;

// Instance a QEP interface driver
QEP qep1 = QEP_DEFAULTS;

// Default ADC initialization
int ChSel[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int TrigSel[16] = {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};
int ACQPS[16] = {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};

#define SYSTEM_FREQUENCY 60

// 10 kHz PWM frequency
#define PWM_FREQ 10000

//////////////////////////////////////////////////////////////////////////
// Devices on the peripheral

void gmp_setup_peripheral()
{

    // Initialize PWM module
    pwm1.PeriodMax = SYSTEM_FREQUENCY * 1000000 / PWM_FREQ / 2; // Prescaler X1 (T1), ISR period = T x 1
    pwm1.HalfPerMax = pwm1.PeriodMax / 2;
    pwm1.Deadband = 2.0 * SYSTEM_FREQUENCY; // 120 counts -> 2.0 usec for TBCLK = SYSCLK/1
    PWM_INIT_MACRO(1, 2, 3, pwm1);

    // Initialize PWMDAC module
    pwmdac1.PeriodMax = 500; // @60Mhz, 1500->20kHz, 1000-> 30kHz, 500->60kHz
    pwmdac1.HalfPerMax = pwmdac1.PeriodMax / 2;
    PWMDAC_INIT_MACRO(6, pwmdac1); // PWM 6A,6B
    PWMDAC_INIT_MACRO(7, pwmdac1); // PWM 7A,7B

    // Initialize ADC for DMC Kit Rev 1.1
    ChSel[0] = 1;  // Dummy meas. avoid 1st sample issue Rev0 Picollo*/
    ChSel[1] = 1;  // ChSelect: ADC A1-> Phase A Current
    ChSel[2] = 9;  // ChSelect: ADC B1-> Phase B Current
    ChSel[3] = 3;  // ChSelect: ADC A3-> Phase C Current
    ChSel[4] = 15; // ChSelect: ADC B7-> Phase A Voltage
    ChSel[5] = 14; // ChSelect: ADC B6-> Phase B Voltage
    ChSel[6] = 12; // ChSelect: ADC B4-> Phase C Voltage
    ChSel[7] = 7;  // ChSelect: ADC A7-> DC Bus  Voltage

    ADC_MACRO_INIT(ChSel, TrigSel, ACQPS);

    // Reassign ISRs.

    EALLOW; // This is needed to write to EALLOW protected registers

    PieVectTable.ADCINT1 = &MainISR;

    // Enable PIE group 1 interrupt 1 for ADC1_INT
    PieCtrlRegs.PIEIER1.bit.INTx1 = 1;

    // Enable EOC interrupt(after the 4th conversion)

    AdcRegs.ADCINTOVFCLR.bit.ADCINT1 = 1;
    AdcRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;
    AdcRegs.INTSEL1N2.bit.INT1CONT = 1; //
    AdcRegs.INTSEL1N2.bit.INT1SEL = 4;
    AdcRegs.INTSEL1N2.bit.INT1E = 1;

    // Enable CPU INT1 for ADC1_INT:
    IER |= M_INT1;

    EDIS;
}

// This function should be implement by bsp_c1
void gmp_init_peripheral_tree()
{
    

}

//////////////////////////////////////////////////////////////////////////
// interrupt reaction

interrupt void MainISR(void)
{
    // Get ADC result
    // AdcResult.ADCRESULT1

    // Call GMP CTL
    ctl_dispatch();

    // ------------------------------------------------------------------------------
    //  Connect inputs of the PWM_DRV module and call the PWM signal generation macro
    // ------------------------------------------------------------------------------
//    pwm1.MfuncC1 = svgen1.Ta;
//    pwm1.MfuncC2 = svgen1.Tb;
//    pwm1.MfuncC3 = svgen1.Tc;
//    PWM_MACRO(1, 2, 3, pwm1); // Calculate the new PWM compare values

    // Enable more interrupts from this timer
    AdcRegs.ADCINTFLG.bit.ADCINT1 = 1;

    // Acknowledge interrupt to receive more interrupts from PIE group 1
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}
