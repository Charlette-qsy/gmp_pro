// This file contains all the leading macro definitions.
// This file may configure the operating mode of the whole library.


// This file should be generated by `tools/bsp_c1`.

#ifndef GENERAL_MOTOR_PLAT

// GMP library version definition
#define GENERAL_MOTOR_PLAT

// Library Serial numbers
#define GMP_SERIAL_NUM     ((00006ul))

#define GMP_AUTO 
#define GMP_STM32   1
#define GMP_TIC2000 2
#define GMP_WINDOWS 3
#define GMP_LINUX   4

// GMP support chip select
#define MASTERCHIP GMP_STM32

// GMP Master chip set select
#define MASTER_CHIP_SET NULL

// Compiler options
#define COMPILER_AC6

// Enable unimplemented function warning 
#define SPECIFY_ENABLE_UNIMPL_FUNC_WARNING

// When meet an unimplemented function just stuck the program
#define SPECIFY_STUCK_WHEN_UNIMPL_FUNC 

// enable the test environment
// This switch is only for developing
// As a common user, we strongly suggest you disable the macro
//#define SPECIFY_ENABLE_TEST_ENVIRONMENT

// specify what happened when error happened.
// when you enable the flag, the system will stuck when error occurred.
// Or, when error occurred, the program will continue running.
//#define SPECIFY_STUCK_WHEN_ERROR

//////////////////////////////////////////////////////////////////////////
// MEMORY CONTROLLER SETTINGS
// Memory Management Deposit
// 
// GMP/core/mm
// enable the block memory management
// if you disable the block, the block memory will not active.
#define SPECIFY_GMP_BLOCK_MEMORY_ENABLE

// specify the initial global memory heap bank.
#define GMP_GLOBAL_MEMORY_HEAP_HANDLE default_mem_heap

// specify the default memory control function, allocation and free
#define GMP_BLOCK_ALLOC_FUNC(size) gmp_block_alloc(default_mem_heap, size)
#define GMP_BLOCK_FREE_FUNC(ptr) gmp_block_free(default_mem_heap, ptr)

// #define GMP_BLOCK_ALLOC_FUNC(size) alloc(size)
// #define GMP_BLOCK_FREE_FUNC(ptr) free(ptr)

// Specify the default heap size
#define GMP_DEFAULT_HEAP_SIZE ((1536))

// The default print function rely on the allocation function,
// so the alloc_function and free_function is necessary
//#define SPECIFY_ENABLE_DEFUALT_DEBUG_PRINT_FUNC

// In default case, the print function may use gmp_malloc function,
// if you have to avoid the malloc and free you should enable the following function 
//#define SPECIFY_DISABLE_DYNAMIC_ALLOC_OF_DBGPTR


//////////////////////////////////////////////////////////////////////////
// Device and IO device controller Settings
// Device and Peripheral Management Deposit
// 
// NOTICE: if you disable the module you will lose the ability of ext module
// 
// GMP/core/dev
#define GMP_PERIPHERAL_IO

// GMP IO device extention
// GMP/ext



//////////////////////////////////////////////////////////////////////////
// GMP WF settings
// Work flow Management Deposit
// 
// GMP/core/workflow


// GMP/core/workflow_scheduling


//////////////////////////////////////////////////////////////////////////
// GMP CTL(Controller Template Library)

// Enable GMP CTL module
#define SPECIFY_ENABLE_GMP_CTL

// The rest of GMP CTL config please complete in <ctrl_config.h>


//////////////////////////////////////////////////////////////////////////
// Functional blocks

// This module permit user may auto detect what chip in use.
#if defined GMP_AUTO

#endif // GMP_AUTO


#endif // GENERAL_MOTOR_PLAT
